# This code was automatically generated by CWrap version 0.0.0

from libc.stdint cimport int64_t, intmax_t, uintmax_t, uint32_t, uint16_t
from libc.stddef cimport wchar_t


cdef extern from "git2.h":

    void git_libgit2_version(int *major, int *minor, int *rev)

    cdef enum:
        GIT_CAP_THREADS
        GIT_CAP_HTTPS

    int git_libgit2_capabilities()

    cdef enum:
        GIT_OPT_GET_MWINDOW_SIZE
        GIT_OPT_SET_MWINDOW_SIZE
        GIT_OPT_GET_MWINDOW_MAPPED_LIMIT
        GIT_OPT_SET_MWINDOW_MAPPED_LIMIT

    void git_libgit2_opts(int option)

    int git_threads_init()

    void git_threads_shutdown()

    cdef enum:
        GIT_OK
        GIT_ERROR
        GIT_ENOTFOUND
        GIT_EEXISTS
        GIT_EAMBIGUOUS
        GIT_EBUFS
        GIT_EUSER
        GIT_EBAREREPO
        GIT_EORPHANEDHEAD
        GIT_EUNMERGED
        GIT_ENONFASTFORWARD
        GIT_EINVALIDSPEC
        GIT_EMERGECONFLICT
        GIT_PASSTHROUGH
        GIT_ITEROVER

    cdef struct git_error:
        char *message
        int klass

    ctypedef git_error const_git_error "const git_error"

    cdef enum git_error_t:
        GITERR_NOMEMORY
        GITERR_OS
        GITERR_INVALID
        GITERR_REFERENCE
        GITERR_ZLIB
        GITERR_REPOSITORY
        GITERR_CONFIG
        GITERR_REGEX
        GITERR_ODB
        GITERR_INDEX
        GITERR_OBJECT
        GITERR_NET
        GITERR_TAG
        GITERR_TREE
        GITERR_INDEXER
        GITERR_SSL
        GITERR_SUBMODULE
        GITERR_THREAD
        GITERR_STASH
        GITERR_CHECKOUT
        GITERR_FETCHHEAD
        GITERR_MERGE

    git_error *giterr_last()

    void giterr_clear()

    void giterr_set_str(int error_class, char *string)

    void giterr_set_oom()

    ctypedef int64_t git_off_t

    ctypedef int64_t git_time_t

    cdef enum git_otype:
        GIT_OBJ_ANY
        GIT_OBJ_BAD
        GIT_OBJ__EXT1
        GIT_OBJ_COMMIT
        GIT_OBJ_TREE
        GIT_OBJ_BLOB
        GIT_OBJ_TAG
        GIT_OBJ__EXT2
        GIT_OBJ_OFS_DELTA
        GIT_OBJ_REF_DELTA

    ctypedef git_odb git_odb

    cdef struct git_odb:
        pass

    ctypedef git_odb_backend git_odb_backend

    cdef struct git_odb_backend:
        pass

    ctypedef git_odb_object git_odb_object

    cdef struct git_odb_object:
        pass

    ctypedef git_odb_stream git_odb_stream

    cdef struct git_odb_stream:
        pass

    ctypedef git_odb_writepack git_odb_writepack

    cdef struct git_odb_writepack:
        pass

    ctypedef git_repository git_repository

    cdef struct git_repository:
        pass

    ctypedef git_object git_object

    cdef struct git_object:
        pass

    ctypedef git_revwalk git_revwalk

    cdef struct git_revwalk:
        pass

    ctypedef git_tag git_tag

    cdef struct git_tag:
        pass

    ctypedef git_blob git_blob

    cdef struct git_blob:
        pass

    ctypedef git_commit git_commit

    cdef struct git_commit:
        pass

    ctypedef git_tree_entry git_tree_entry

    cdef struct git_tree_entry:
        pass

    ctypedef git_tree git_tree

    cdef struct git_tree:
        pass

    ctypedef git_treebuilder git_treebuilder

    cdef struct git_treebuilder:
        pass

    ctypedef git_index git_index

    cdef struct git_index:
        pass

    ctypedef git_config git_config

    cdef struct git_config:
        pass

    ctypedef git_config_backend git_config_backend

    cdef struct git_config_backend:
        pass

    ctypedef git_reflog_entry git_reflog_entry

    cdef struct git_reflog_entry:
        pass

    ctypedef git_reflog git_reflog

    cdef struct git_reflog:
        pass

    ctypedef git_note git_note

    cdef struct git_note:
        pass

    ctypedef git_packbuilder git_packbuilder

    cdef struct git_packbuilder:
        pass

    cdef struct git_time:
        git_time_t time
        int offset

    ctypedef git_time git_time

    cdef struct git_signature:
        char *name
        char *email
        git_time when

    ctypedef git_signature git_signature

    ctypedef git_reference git_reference

    cdef struct git_reference:
        pass

    cdef enum git_ref_t:
        GIT_REF_INVALID
        GIT_REF_OID
        GIT_REF_SYMBOLIC
        GIT_REF_PACKED
        GIT_REF_HAS_PEEL
        GIT_REF_LISTALL

    cdef enum git_branch_t:
        GIT_BRANCH_LOCAL
        GIT_BRANCH_REMOTE

    cdef enum git_filemode_t:
        GIT_FILEMODE_NEW
        GIT_FILEMODE_TREE
        GIT_FILEMODE_BLOB
        GIT_FILEMODE_BLOB_EXECUTABLE
        GIT_FILEMODE_LINK
        GIT_FILEMODE_COMMIT

    ctypedef git_refspec git_refspec

    cdef struct git_refspec:
        pass

    ctypedef git_remote git_remote

    cdef struct git_remote:
        pass

    ctypedef git_push git_push

    cdef struct git_push:
        pass

    ctypedef git_remote_head git_remote_head

    cdef struct git_remote_head:
        pass

    cdef struct imaxdiv_t:
        long int quot
        long int rem

    intmax_t imaxabs(intmax_t __n)

    imaxdiv_t imaxdiv(intmax_t __numer, intmax_t __denom)

    long int __strtol_internal(char *__nptr, char **__endptr, int __base, int __group)

    intmax_t strtoimax(char *nptr, char **endptr, int base)

    long unsigned int __strtoul_internal(char *__nptr, char **__endptr, int __base, int __group)

    uintmax_t strtoumax(char *nptr, char **endptr, int base)

    long int __wcstol_internal(wchar_t *__nptr, wchar_t **__endptr, int __base, int __group)

    intmax_t wcstoimax(wchar_t *nptr, wchar_t **endptr, int base)

    long unsigned int __wcstoul_internal(wchar_t *__nptr, wchar_t **__endptr, int __base, int __group)

    uintmax_t wcstoumax(wchar_t *nptr, wchar_t **endptr, int base)

    # ctypedef long unsigned int pthread_t

    # cdef union pthread_attr_t:
    #     char __size[56]
    #     long int __align

    # cdef struct __pthread_internal_list:
    #     __pthread_internal_list *__prev
    #     __pthread_internal_list *__next

    # ctypedef __pthread_internal_list __pthread_list_t

    # cdef struct __pthread_mutex_t___pthread_mutex_s:
    #     int __lock
    #     unsigned int __count
    #     int __owner
    #     unsigned int __nusers
    #     int __kind
    #     int __spins
    #     __pthread_list_t __list

    # cdef union pthread_mutex_t:
    #     __pthread_mutex_t___pthread_mutex_s_t __data
    #     char __size[40]
    #     long int __align

    # cdef union pthread_mutexattr_t:
    #     char __size[4]
    #     int __align

    # cdef struct __pthread_cond_t_N14pthread_cond_t4DOT_12E:
    #     int __lock
    #     unsigned int __futex
    #     long long unsigned int __total_seq
    #     long long unsigned int __wakeup_seq
    #     long long unsigned int __woken_seq
    #     void *__mutex
    #     unsigned int __nwaiters
    #     unsigned int __broadcast_seq

    # cdef union pthread_cond_t:
    #     __pthread_cond_t_N14pthread_cond_t4DOT_12E_t __data
    #     char __size[48]
    #     long long int __align

    # cdef union pthread_condattr_t:
    #     char __size[4]
    #     int __align

    # ctypedef unsigned int pthread_key_t

    # ctypedef int pthread_once_t

    # cdef struct __pthread_rwlock_t_N16pthread_rwlock_t4DOT_15E:
    #     int __lock
    #     unsigned int __nr_readers
    #     unsigned int __readers_wakeup
    #     unsigned int __writer_wakeup
    #     unsigned int __nr_readers_queued
    #     unsigned int __nr_writers_queued
    #     int __writer
    #     int __shared
    #     long unsigned int __pad1
    #     long unsigned int __pad2
    #     unsigned int __flags

    # cdef union pthread_rwlock_t:
    #     __pthread_rwlock_t_N16pthread_rwlock_t4DOT_15E_t __data
    #     char __size[56]
    #     long int __align

    # cdef union pthread_rwlockattr_t:
    #     char __size[8]
    #     long int __align

    # ctypedef int pthread_spinlock_t

    # cdef union pthread_barrier_t:
    #     char __size[32]
    #     long int __align

    # cdef union pthread_barrierattr_t:
    #     char __size[4]
    #     int __align

    ctypedef unsigned char __u_char

    ctypedef short unsigned int __u_short

    ctypedef unsigned int __u_int

    ctypedef long unsigned int __u_long

    ctypedef signed char __int8_t

    ctypedef unsigned char __uint8_t

    ctypedef short int __int16_t

    ctypedef short unsigned int __uint16_t

    ctypedef int __int32_t

    ctypedef unsigned int __uint32_t

    ctypedef long int __int64_t

    ctypedef long unsigned int __uint64_t

    ctypedef long int __quad_t

    ctypedef long unsigned int __u_quad_t

    ctypedef long unsigned int __dev_t

    ctypedef unsigned int __uid_t

    ctypedef unsigned int __gid_t

    ctypedef long unsigned int __ino_t

    ctypedef long unsigned int __ino64_t

    ctypedef unsigned int __mode_t

    ctypedef long unsigned int __nlink_t

    ctypedef long int __off_t

    ctypedef long int __off64_t

    ctypedef int __pid_t

    cdef struct __fsid_t:
        int __val[2]

    ctypedef long int __clock_t

    ctypedef long unsigned int __rlim_t

    ctypedef long unsigned int __rlim64_t

    ctypedef unsigned int __id_t

    ctypedef long int __time_t

    ctypedef unsigned int __useconds_t

    ctypedef long int __suseconds_t

    ctypedef int __daddr_t

    ctypedef long int __swblk_t

    ctypedef int __key_t

    ctypedef int __clockid_t

    ctypedef void *__timer_t

    ctypedef long int __blksize_t

    ctypedef long int __blkcnt_t

    ctypedef long int __blkcnt64_t

    ctypedef long unsigned int __fsblkcnt_t

    ctypedef long unsigned int __fsblkcnt64_t

    ctypedef long unsigned int __fsfilcnt_t

    ctypedef long unsigned int __fsfilcnt64_t

    ctypedef long int __ssize_t

    ctypedef __off64_t __loff_t

    ctypedef __quad_t *__qaddr_t

    ctypedef char *__caddr_t

    ctypedef long int __intptr_t

    ctypedef unsigned int __socklen_t

    ctypedef __u_char u_char

    ctypedef __u_short u_short

    ctypedef __u_int u_int

    ctypedef __u_long u_long

    ctypedef __quad_t quad_t

    ctypedef __u_quad_t u_quad_t

    ctypedef __fsid_t fsid_t

    ctypedef __loff_t loff_t

    ctypedef __ino_t ino_t

    ctypedef __ino64_t ino64_t

    ctypedef __dev_t dev_t

    ctypedef __gid_t gid_t

    ctypedef __mode_t mode_t

    ctypedef __nlink_t nlink_t

    ctypedef __uid_t uid_t

    ctypedef __off_t off_t

    ctypedef __off64_t off64_t

    ctypedef __id_t id_t

    ctypedef __ssize_t ssize_t

    ctypedef __daddr_t daddr_t

    ctypedef __caddr_t caddr_t

    ctypedef __key_t key_t

    ctypedef __useconds_t useconds_t

    ctypedef __suseconds_t suseconds_t

    ctypedef long unsigned int ulong

    ctypedef short unsigned int ushort

    ctypedef unsigned int uint

    ctypedef signed char int8_t

    ctypedef short int int16_t

    ctypedef int int32_t

    ctypedef long int int64_t

    ctypedef unsigned char u_int8_t

    ctypedef short unsigned int u_int16_t

    ctypedef unsigned int u_int32_t

    ctypedef long unsigned int u_int64_t

    ctypedef long int register_t

    ctypedef __blksize_t blksize_t

    ctypedef __blkcnt_t blkcnt_t

    ctypedef __fsblkcnt_t fsblkcnt_t

    ctypedef __fsfilcnt_t fsfilcnt_t

    ctypedef __blkcnt64_t blkcnt64_t

    ctypedef __fsblkcnt64_t fsblkcnt64_t

    ctypedef __fsfilcnt64_t fsfilcnt64_t

    cdef struct git_oid:
        unsigned char id[20]

    ctypedef git_oid git_oid

    int git_oid_fromstr(git_oid *out, char *str)

    int git_oid_fromstrn(git_oid *out, char *str, size_t length)

    void git_oid_fromraw(git_oid *out, unsigned char *raw)

    void git_oid_fmt(char *out, git_oid *id)

    void git_oid_pathfmt(char *out, git_oid *id)

    char *git_oid_allocfmt(git_oid *id)

    char *git_oid_tostr(char *out, size_t n, git_oid *id)

    void git_oid_cpy(git_oid *out, git_oid *src)

    int git_oid_cmp(git_oid *a, git_oid *b)

    int git_oid_equal(git_oid *a, git_oid *b)

    int git_oid_ncmp(git_oid *a, git_oid *b, size_t len)

    int git_oid_streq(git_oid *id, char *str)

    int git_oid_iszero(git_oid *id)

    ctypedef git_oid_shorten git_oid_shorten

    cdef struct git_oid_shorten:
        pass

    git_oid_shorten *git_oid_shorten_new(size_t min_length)

    int git_oid_shorten_add(git_oid_shorten *os, char *text_id)

    void git_oid_shorten_free(git_oid_shorten *os)

    int git_signature_new(git_signature **out, char *name, char *email, git_time_t time, int offset)

    int git_signature_now(git_signature **out, char *name, char *email)

    git_signature *git_signature_dup(git_signature *sig)

    void git_signature_free(git_signature *sig)

    ctypedef int (*git_odb_foreach_cb)(git_oid *, void *)

    cdef struct git_odb_backend:
        unsigned int version
        git_odb *odb
        int (*read)(void **, size_t *, git_otype *, git_odb_backend *, git_oid *)
        int (*read_prefix)(git_oid *, void **, size_t *, git_otype *, git_odb_backend *, git_oid *, size_t)
        int (*read_header)(size_t *, git_otype *, git_odb_backend *, git_oid *)
        int (*write)(git_oid *, git_odb_backend *, void *, size_t, git_otype)
        int (*writestream)(git_odb_stream **, git_odb_backend *, size_t, git_otype)
        int (*readstream)(git_odb_stream **, git_odb_backend *, git_oid *)
        int (*exists)(git_odb_backend *, git_oid *)
        int (*refresh)(git_odb_backend *)
        int (*foreach)(git_odb_backend *, git_odb_foreach_cb, void *)
        int (*writepack)(git_odb_writepack **, git_odb_backend *, git_transfer_progress_callback, void *)
        void (*free)(git_odb_backend *)

    cdef enum:
        GIT_STREAM_RDONLY
        GIT_STREAM_WRONLY
        GIT_STREAM_RW

    cdef struct git_odb_stream:
        git_odb_backend *backend
        unsigned int mode
        int (*read)(git_odb_stream *, char *, size_t)
        int (*write)(git_odb_stream *, char *, size_t)
        int (*finalize_write)(git_oid *, git_odb_stream *)
        void (*free)(git_odb_stream *)

    cdef struct git_odb_writepack:
        git_odb_backend *backend
        int (*add)(git_odb_writepack *, void *, size_t, git_transfer_progress *)
        int (*commit)(git_odb_writepack *, git_transfer_progress *)
        void (*free)(git_odb_writepack *)

    void *git_odb_backend_malloc(git_odb_backend *backend, size_t len)

    int git_odb_backend_pack(git_odb_backend **out, char *objects_dir)

    int git_odb_backend_loose(git_odb_backend **out, char *objects_dir, int compression_level, int do_fsync)

    int git_odb_backend_one_pack(git_odb_backend **out, char *index_file)

    cdef struct git_transfer_progress:
        unsigned int total_objects
        unsigned int indexed_objects
        unsigned int received_objects
        size_t received_bytes

    ctypedef git_transfer_progress git_transfer_progress

    ctypedef int (*git_transfer_progress_callback)(git_transfer_progress *, void *)

    ctypedef git_indexer git_indexer

    cdef struct git_indexer:
        pass

    ctypedef git_indexer_stream git_indexer_stream

    cdef struct git_indexer_stream:
        pass

    int git_indexer_stream_new(git_indexer_stream **out, char *path, git_transfer_progress_callback progress_cb, void *progress_cb_payload)

    int git_indexer_stream_add(git_indexer_stream *idx, void *data, size_t size, git_transfer_progress *stats)

    int git_indexer_stream_finalize(git_indexer_stream *idx, git_transfer_progress *stats)

    git_oid *git_indexer_stream_hash(git_indexer_stream *idx)

    void git_indexer_stream_free(git_indexer_stream *idx)

    int git_indexer_new(git_indexer **out, char *packname)

    int git_indexer_run(git_indexer *idx, git_transfer_progress *stats)

    int git_indexer_write(git_indexer *idx)

    git_oid *git_indexer_hash(git_indexer *idx)

    void git_indexer_free(git_indexer *idx)

    int git_odb_new(git_odb **out)

    int git_odb_open(git_odb **out, char *objects_dir)

    int git_odb_add_backend(git_odb *odb, git_odb_backend *backend, int priority)

    int git_odb_add_alternate(git_odb *odb, git_odb_backend *backend, int priority)

    int git_odb_add_disk_alternate(git_odb *odb, char *path)

    void git_odb_free(git_odb *db)

    int git_odb_read(git_odb_object **out, git_odb *db, git_oid *id)

    int git_odb_read_prefix(git_odb_object **out, git_odb *db, git_oid *short_id, size_t len)

    int git_odb_read_header(size_t *len_out, git_otype *type_out, git_odb *db, git_oid *id)

    int git_odb_exists(git_odb *db, git_oid *id)

    int git_odb_refresh(git_odb *db)

    int git_odb_foreach(git_odb *db, git_odb_foreach_cb cb, void *payload)

    int git_odb_write(git_oid *out, git_odb *odb, void *data, size_t len, git_otype type)

    int git_odb_open_wstream(git_odb_stream **out, git_odb *db, size_t size, git_otype type)

    int git_odb_open_rstream(git_odb_stream **out, git_odb *db, git_oid *oid)

    int git_odb_write_pack(git_odb_writepack **out, git_odb *db, git_transfer_progress_callback progress_cb, void *progress_payload)

    int git_odb_hash(git_oid *out, void *data, size_t len, git_otype type)

    int git_odb_hashfile(git_oid *out, char *path, git_otype type)

    void git_odb_object_free(git_odb_object *object)

    git_oid *git_odb_object_id(git_odb_object *object)

    void *git_odb_object_data(git_odb_object *object)

    size_t git_odb_object_size(git_odb_object *object)

    git_otype git_odb_object_type(git_odb_object *object)

    int git_repository_open(git_repository **out, char *path)

    int git_repository_wrap_odb(git_repository **out, git_odb *odb)

    int git_repository_discover(char *path_out, size_t path_size, char *start_path, int across_fs, char *ceiling_dirs)

    cdef enum git_repository_open_flag_t:
        GIT_REPOSITORY_OPEN_NO_SEARCH
        GIT_REPOSITORY_OPEN_CROSS_FS

    int git_repository_open_ext(git_repository **out, char *path, unsigned int flags, char *ceiling_dirs)

    void git_repository_free(git_repository *repo)

    int git_repository_init(git_repository **out, char *path, unsigned int is_bare)

    cdef enum git_repository_init_flag_t:
        GIT_REPOSITORY_INIT_BARE
        GIT_REPOSITORY_INIT_NO_REINIT
        GIT_REPOSITORY_INIT_NO_DOTGIT_DIR
        GIT_REPOSITORY_INIT_MKDIR
        GIT_REPOSITORY_INIT_MKPATH
        GIT_REPOSITORY_INIT_EXTERNAL_TEMPLATE

    cdef enum git_repository_init_mode_t:
        GIT_REPOSITORY_INIT_SHARED_UMASK
        GIT_REPOSITORY_INIT_SHARED_GROUP
        GIT_REPOSITORY_INIT_SHARED_ALL

    cdef struct git_repository_init_options:
        unsigned int version
        uint32_t flags
        uint32_t mode
        char *workdir_path
        char *description
        char *template_path
        char *initial_head
        char *origin_url

    int git_repository_init_ext(git_repository **out, char *repo_path, git_repository_init_options *opts)

    int git_repository_head(git_reference **out, git_repository *repo)

    int git_repository_head_detached(git_repository *repo)

    int git_repository_head_orphan(git_repository *repo)

    int git_repository_is_empty(git_repository *repo)

    char *git_repository_path(git_repository *repo)

    char *git_repository_workdir(git_repository *repo)

    int git_repository_set_workdir(git_repository *repo, char *workdir, int update_gitlink)

    int git_repository_is_bare(git_repository *repo)

    int git_repository_config(git_config **out, git_repository *repo)

    void git_repository_set_config(git_repository *repo, git_config *config)

    int git_repository_odb(git_odb **out, git_repository *repo)

    void git_repository_set_odb(git_repository *repo, git_odb *odb)

    int git_repository_index(git_index **out, git_repository *repo)

    void git_repository_set_index(git_repository *repo, git_index *index)

    int git_repository_message(char *out, size_t len, git_repository *repo)

    int git_repository_message_remove(git_repository *repo)

    int git_repository_merge_cleanup(git_repository *repo)

    ctypedef int (*git_repository_fetchhead_foreach_cb)(char *, char *, git_oid *, unsigned int, void *)

    int git_repository_fetchhead_foreach(git_repository *repo, git_repository_fetchhead_foreach_cb callback, void *payload)

    ctypedef int (*git_repository_mergehead_foreach_cb)(git_oid *, void *)

    int git_repository_mergehead_foreach(git_repository *repo, git_repository_mergehead_foreach_cb callback, void *payload)

    int git_repository_hashfile(git_oid *out, git_repository *repo, char *path, git_otype type, char *as_path)

    int git_repository_set_head(git_repository *repo, char *refname)

    int git_repository_set_head_detached(git_repository *repo, git_oid *commitish)

    int git_repository_detach_head(git_repository *repo)

    cdef enum git_repository_state_t:
        GIT_REPOSITORY_STATE_NONE
        GIT_REPOSITORY_STATE_MERGE
        GIT_REPOSITORY_STATE_REVERT
        GIT_REPOSITORY_STATE_CHERRY_PICK
        GIT_REPOSITORY_STATE_BISECT
        GIT_REPOSITORY_STATE_REBASE
        GIT_REPOSITORY_STATE_REBASE_INTERACTIVE
        GIT_REPOSITORY_STATE_REBASE_MERGE
        GIT_REPOSITORY_STATE_APPLY_MAILBOX
        GIT_REPOSITORY_STATE_APPLY_MAILBOX_OR_REBASE

    int git_repository_state(git_repository *repo)

    int git_revwalk_new(git_revwalk **out, git_repository *repo)

    void git_revwalk_reset(git_revwalk *walker)

    int git_revwalk_push(git_revwalk *walk, git_oid *id)

    int git_revwalk_push_glob(git_revwalk *walk, char *glob)

    int git_revwalk_push_head(git_revwalk *walk)

    int git_revwalk_hide(git_revwalk *walk, git_oid *commit_id)

    int git_revwalk_hide_glob(git_revwalk *walk, char *glob)

    int git_revwalk_hide_head(git_revwalk *walk)

    int git_revwalk_push_ref(git_revwalk *walk, char *refname)

    int git_revwalk_hide_ref(git_revwalk *walk, char *refname)

    int git_revwalk_next(git_oid *out, git_revwalk *walk)

    void git_revwalk_sorting(git_revwalk *walk, unsigned int sort_mode)

    void git_revwalk_free(git_revwalk *walk)

    git_repository *git_revwalk_repository(git_revwalk *walk)

    int git_merge_base(git_oid *out, git_repository *repo, git_oid *one, git_oid *two)

    int git_merge_base_many(git_oid *out, git_repository *repo, git_oid *input_array, size_t length)

    int git_graph_ahead_behind(size_t *ahead, size_t *behind, git_repository *repo, git_oid *one, git_oid *two)

    cdef struct git_strarray:
        char **strings
        size_t count

    ctypedef git_strarray git_strarray

    void git_strarray_free(git_strarray *array)

    int git_strarray_copy(git_strarray *tgt, git_strarray *src)

    int git_reference_lookup(git_reference **out, git_repository *repo, char *name)

    int git_reference_name_to_id(git_oid *out, git_repository *repo, char *name)

    int git_reference_symbolic_create(git_reference **out, git_repository *repo, char *name, char *target, int force)

    int git_reference_create(git_reference **out, git_repository *repo, char *name, git_oid *id, int force)

    git_oid *git_reference_target(git_reference *ref)

    char *git_reference_symbolic_target(git_reference *ref)

    git_ref_t git_reference_type(git_reference *ref)

    char *git_reference_name(git_reference *ref)

    int git_reference_resolve(git_reference **out, git_reference *ref)

    git_repository *git_reference_owner(git_reference *ref)

    int git_reference_symbolic_set_target(git_reference *ref, char *target)

    int git_reference_set_target(git_reference *ref, git_oid *id)

    int git_reference_rename(git_reference *ref, char *name, int force)

    int git_reference_delete(git_reference *ref)

    int git_reference_packall(git_repository *repo)

    int git_reference_list(git_strarray *array, git_repository *repo, unsigned int list_flags)

    ctypedef int (*git_reference_foreach_cb)(char *, void *)

    int git_reference_foreach(git_repository *repo, unsigned int list_flags, git_reference_foreach_cb callback, void *payload)

    int git_reference_is_packed(git_reference *ref)

    int git_reference_reload(git_reference *ref)

    void git_reference_free(git_reference *ref)

    int git_reference_cmp(git_reference *ref1, git_reference *ref2)

    int git_reference_foreach_glob(git_repository *repo, char *glob, unsigned int list_flags, git_reference_foreach_cb callback, void *payload)

    int git_reference_has_log(git_reference *ref)

    int git_reference_is_branch(git_reference *ref)

    int git_reference_is_remote(git_reference *ref)

    cdef enum git_reference_normalize_t:
        GIT_REF_FORMAT_NORMAL
        GIT_REF_FORMAT_ALLOW_ONELEVEL
        GIT_REF_FORMAT_REFSPEC_PATTERN

    int git_reference_normalize_name(char *buffer_out, size_t buffer_size, char *name, unsigned int flags)

    int git_reference_peel(git_object **out, git_reference *ref, git_otype type)

    int git_reference_is_valid_name(char *refname)

    int git_reflog_read(git_reflog **out, git_reference *ref)

    int git_reflog_write(git_reflog *reflog)

    int git_reflog_append(git_reflog *reflog, git_oid *id, git_signature *committer, char *msg)

    int git_reflog_rename(git_reference *ref, char *name)

    int git_reflog_delete(git_reference *ref)

    size_t git_reflog_entrycount(git_reflog *reflog)

    git_reflog_entry *git_reflog_entry_byindex(git_reflog *reflog, size_t idx)

    int git_reflog_drop(git_reflog *reflog, size_t idx, int rewrite_previous_entry)

    git_oid *git_reflog_entry_id_old(git_reflog_entry *entry)

    git_oid *git_reflog_entry_id_new(git_reflog_entry *entry)

    git_signature *git_reflog_entry_committer(git_reflog_entry *entry)

    char *git_reflog_entry_message(git_reflog_entry *entry)

    void git_reflog_free(git_reflog *reflog)

    int git_revparse_single(git_object **out, git_repository *repo, char *spec)

    int git_object_lookup(git_object **object, git_repository *repo, git_oid *id, git_otype type)

    int git_object_lookup_prefix(git_object **object_out, git_repository *repo, git_oid *id, size_t len, git_otype type)

    git_oid *git_object_id(git_object *obj)

    git_otype git_object_type(git_object *obj)

    git_repository *git_object_owner(git_object *obj)

    void git_object_free(git_object *object)

    char *git_object_type2string(git_otype type)

    git_otype git_object_string2type(char *str)

    int git_object_typeisloose(git_otype type)

    size_t git_object__size(git_otype type)

    int git_object_peel(git_object **peeled, git_object *object, git_otype target_type)

    int git_blob_lookup(git_blob **blob, git_repository *repo, git_oid *id)

    int git_blob_lookup_prefix(git_blob **blob, git_repository *repo, git_oid *id, size_t len)

    void git_blob_free(git_blob *blob)

    git_oid *git_blob_id(git_blob *blob)

    void *git_blob_rawcontent(git_blob *blob)

    git_off_t git_blob_rawsize(git_blob *blob)

    int git_blob_create_fromworkdir(git_oid *id, git_repository *repo, char *relative_path)

    int git_blob_create_fromdisk(git_oid *id, git_repository *repo, char *path)

    ctypedef int (*git_blob_chunk_cb)(char *, size_t, void *)

    int git_blob_create_fromchunks(git_oid *id, git_repository *repo, char *hintpath, git_blob_chunk_cb callback, void *payload)

    int git_blob_create_frombuffer(git_oid *oid, git_repository *repo, void *buffer, size_t len)

    int git_blob_is_binary(git_blob *blob)

    int git_commit_lookup(git_commit **commit, git_repository *repo, git_oid *id)

    int git_commit_lookup_prefix(git_commit **commit, git_repository *repo, git_oid *id, size_t len)

    void git_commit_free(git_commit *commit)

    git_oid *git_commit_id(git_commit *commit)

    char *git_commit_message_encoding(git_commit *commit)

    char *git_commit_message(git_commit *commit)

    git_time_t git_commit_time(git_commit *commit)

    int git_commit_time_offset(git_commit *commit)

    git_signature *git_commit_committer(git_commit *commit)

    git_signature *git_commit_author(git_commit *commit)

    int git_commit_tree(git_tree **tree_out, git_commit *commit)

    git_oid *git_commit_tree_id(git_commit *commit)

    unsigned int git_commit_parentcount(git_commit *commit)

    int git_commit_parent(git_commit **out, git_commit *commit, unsigned int n)

    git_oid *git_commit_parent_id(git_commit *commit, unsigned int n)

    int git_commit_nth_gen_ancestor(git_commit **ancestor, git_commit *commit, unsigned int n)

    int git_commit_create(git_oid *id, git_repository *repo, char *update_ref, git_signature *author, git_signature *committer, char *message_encoding, char *message, git_tree *tree, int parent_count, git_commit **parents)

    int git_commit_create_v(git_oid *id, git_repository *repo, char *update_ref, git_signature *author, git_signature *committer, char *message_encoding, char *message, git_tree *tree, int parent_count)

    int git_tag_lookup(git_tag **out, git_repository *repo, git_oid *id)

    int git_tag_lookup_prefix(git_tag **out, git_repository *repo, git_oid *id, size_t len)

    void git_tag_free(git_tag *tag)

    git_oid *git_tag_id(git_tag *tag)

    int git_tag_target(git_object **target_out, git_tag *tag)

    git_oid *git_tag_target_id(git_tag *tag)

    git_otype git_tag_target_type(git_tag *tag)

    char *git_tag_name(git_tag *tag)

    git_signature *git_tag_tagger(git_tag *tag)

    char *git_tag_message(git_tag *tag)

    int git_tag_create(git_oid *oid, git_repository *repo, char *tag_name, git_object *target, git_signature *tagger, char *message, int force)

    int git_tag_create_frombuffer(git_oid *oid, git_repository *repo, char *buffer, int force)

    int git_tag_create_lightweight(git_oid *oid, git_repository *repo, char *tag_name, git_object *target, int force)

    int git_tag_delete(git_repository *repo, char *tag_name)

    int git_tag_list(git_strarray *tag_names, git_repository *repo)

    int git_tag_list_match(git_strarray *tag_names, char *pattern, git_repository *repo)

    ctypedef int (*git_tag_foreach_cb)(char *, git_oid *, void *)

    int git_tag_foreach(git_repository *repo, git_tag_foreach_cb callback, void *payload)

    int git_tag_peel(git_object **tag_target_out, git_tag *tag)

    int git_tree_lookup(git_tree **out, git_repository *repo, git_oid *id)

    int git_tree_lookup_prefix(git_tree **out, git_repository *repo, git_oid *id, size_t len)

    void git_tree_free(git_tree *tree)

    git_oid *git_tree_id(git_tree *tree)

    git_repository *git_tree_owner(git_tree *tree)

    size_t git_tree_entrycount(git_tree *tree)

    git_tree_entry *git_tree_entry_byname(git_tree *tree, char *filename)

    git_tree_entry *git_tree_entry_byindex(git_tree *tree, size_t idx)

    git_tree_entry *git_tree_entry_byoid(git_tree *tree, git_oid *oid)

    int git_tree_entry_bypath(git_tree_entry **out, git_tree *root, char *path)

    git_tree_entry *git_tree_entry_dup(git_tree_entry *entry)

    void git_tree_entry_free(git_tree_entry *entry)

    char *git_tree_entry_name(git_tree_entry *entry)

    git_oid *git_tree_entry_id(git_tree_entry *entry)

    git_otype git_tree_entry_type(git_tree_entry *entry)

    git_filemode_t git_tree_entry_filemode(git_tree_entry *entry)

    int git_tree_entry_cmp(git_tree_entry *e1, git_tree_entry *e2)

    int git_tree_entry_to_object(git_object **object_out, git_repository *repo, git_tree_entry *entry)

    int git_treebuilder_create(git_treebuilder **out, git_tree *source)

    void git_treebuilder_clear(git_treebuilder *bld)

    unsigned int git_treebuilder_entrycount(git_treebuilder *bld)

    void git_treebuilder_free(git_treebuilder *bld)

    git_tree_entry *git_treebuilder_get(git_treebuilder *bld, char *filename)

    int git_treebuilder_insert(git_tree_entry **out, git_treebuilder *bld, char *filename, git_oid *id, git_filemode_t filemode)

    int git_treebuilder_remove(git_treebuilder *bld, char *filename)

    ctypedef int (*git_treebuilder_filter_cb)(git_tree_entry *, void *)

    void git_treebuilder_filter(git_treebuilder *bld, git_treebuilder_filter_cb filter, void *payload)

    int git_treebuilder_write(git_oid *id, git_repository *repo, git_treebuilder *bld)

    ctypedef int (*git_treewalk_cb)(char *, git_tree_entry *, void *)

    cdef enum git_treewalk_mode:
        GIT_TREEWALK_PRE
        GIT_TREEWALK_POST

    int git_tree_walk(git_tree *tree, git_treewalk_mode mode, git_treewalk_cb callback, void *payload)

    cdef enum git_diff_option_t:
        GIT_DIFF_NORMAL
        GIT_DIFF_REVERSE
        GIT_DIFF_FORCE_TEXT
        GIT_DIFF_IGNORE_WHITESPACE
        GIT_DIFF_IGNORE_WHITESPACE_CHANGE
        GIT_DIFF_IGNORE_WHITESPACE_EOL
        GIT_DIFF_IGNORE_SUBMODULES
        GIT_DIFF_PATIENCE
        GIT_DIFF_INCLUDE_IGNORED
        GIT_DIFF_INCLUDE_UNTRACKED
        GIT_DIFF_INCLUDE_UNMODIFIED
        GIT_DIFF_RECURSE_UNTRACKED_DIRS
        GIT_DIFF_DISABLE_PATHSPEC_MATCH
        GIT_DIFF_DELTAS_ARE_ICASE
        GIT_DIFF_INCLUDE_UNTRACKED_CONTENT
        GIT_DIFF_SKIP_BINARY_CHECK
        GIT_DIFF_INCLUDE_TYPECHANGE
        GIT_DIFF_INCLUDE_TYPECHANGE_TREES
        GIT_DIFF_IGNORE_FILEMODE
        GIT_DIFF_RECURSE_IGNORED_DIRS

    ctypedef git_diff_list git_diff_list

    cdef struct git_diff_list:
        pass

    cdef enum git_diff_flag_t:
        GIT_DIFF_FLAG_BINARY
        GIT_DIFF_FLAG_NOT_BINARY
        GIT_DIFF_FLAG_VALID_OID

    cdef enum git_delta_t:
        GIT_DELTA_UNMODIFIED
        GIT_DELTA_ADDED
        GIT_DELTA_DELETED
        GIT_DELTA_MODIFIED
        GIT_DELTA_RENAMED
        GIT_DELTA_COPIED
        GIT_DELTA_IGNORED
        GIT_DELTA_UNTRACKED
        GIT_DELTA_TYPECHANGE

    cdef struct git_diff_file:
        git_oid oid
        char *path
        git_off_t size
        uint32_t flags
        uint16_t mode

    cdef struct git_diff_delta:
        git_diff_file old_file
        git_diff_file new_file
        git_delta_t status
        uint32_t similarity
        uint32_t flags

    ctypedef int (*git_diff_notify_cb)(git_diff_list *, git_diff_delta *, char *, void *)

    cdef struct git_diff_options:
        unsigned int version
        uint32_t flags
        uint16_t context_lines
        uint16_t interhunk_lines
        char *old_prefix
        char *new_prefix
        git_strarray pathspec
        git_off_t max_size
        git_diff_notify_cb notify_cb
        void *notify_payload

    ctypedef int (*git_diff_file_cb)(git_diff_delta *, float, void *)

    cdef struct git_diff_range:
        int old_start
        int old_lines
        int new_start
        int new_lines

    ctypedef int (*git_diff_hunk_cb)(git_diff_delta *, git_diff_range *, char *, size_t, void *)

    cdef enum git_diff_line_t:
        GIT_DIFF_LINE_CONTEXT
        GIT_DIFF_LINE_ADDITION
        GIT_DIFF_LINE_DELETION
        GIT_DIFF_LINE_ADD_EOFNL
        GIT_DIFF_LINE_DEL_EOFNL
        GIT_DIFF_LINE_FILE_HDR
        GIT_DIFF_LINE_HUNK_HDR
        GIT_DIFF_LINE_BINARY

    ctypedef int (*git_diff_data_cb)(git_diff_delta *, git_diff_range *, char, char *, size_t, void *)

    ctypedef git_diff_patch git_diff_patch

    cdef struct git_diff_patch:
        pass

    cdef enum git_diff_find_t:
        GIT_DIFF_FIND_RENAMES
        GIT_DIFF_FIND_RENAMES_FROM_REWRITES
        GIT_DIFF_FIND_COPIES
        GIT_DIFF_FIND_COPIES_FROM_UNMODIFIED
        GIT_DIFF_FIND_AND_BREAK_REWRITES
        GIT_DIFF_FIND_ALL
        GIT_DIFF_FIND_IGNORE_LEADING_WHITESPACE
        GIT_DIFF_FIND_IGNORE_WHITESPACE
        GIT_DIFF_FIND_DONT_IGNORE_WHITESPACE

    cdef struct git_diff_similarity_metric:
        int (*file_signature)(void **, git_diff_file *, char *, void *)
        int (*buffer_signature)(void **, git_diff_file *, char *, size_t, void *)
        void (*free_signature)(void *, void *)
        int (*similarity)(int *, void *, void *, void *)
        void *payload

    cdef struct git_diff_find_options:
        unsigned int version
        unsigned int flags
        unsigned int rename_threshold
        unsigned int rename_from_rewrite_threshold
        unsigned int copy_threshold
        unsigned int break_rewrite_threshold
        unsigned int target_limit
        git_diff_similarity_metric *metric

    void git_diff_list_free(git_diff_list *diff)

    int git_diff_tree_to_tree(git_diff_list **diff, git_repository *repo, git_tree *old_tree, git_tree *new_tree, git_diff_options *opts)

    int git_diff_tree_to_index(git_diff_list **diff, git_repository *repo, git_tree *old_tree, git_index *index, git_diff_options *opts)

    int git_diff_index_to_workdir(git_diff_list **diff, git_repository *repo, git_index *index, git_diff_options *opts)

    int git_diff_tree_to_workdir(git_diff_list **diff, git_repository *repo, git_tree *old_tree, git_diff_options *opts)

    int git_diff_merge(git_diff_list *onto, git_diff_list *from_)

    int git_diff_find_similar(git_diff_list *diff, git_diff_find_options *options)

    int git_diff_foreach(git_diff_list *diff, git_diff_file_cb file_cb, git_diff_hunk_cb hunk_cb, git_diff_data_cb line_cb, void *payload)

    int git_diff_print_compact(git_diff_list *diff, git_diff_data_cb print_cb, void *payload)

    char git_diff_status_char(git_delta_t status)

    int git_diff_print_patch(git_diff_list *diff, git_diff_data_cb print_cb, void *payload)

    size_t git_diff_num_deltas(git_diff_list *diff)

    size_t git_diff_num_deltas_of_type(git_diff_list *diff, git_delta_t type)

    int git_diff_get_patch(git_diff_patch **patch_out, git_diff_delta **delta_out, git_diff_list *diff, size_t idx)

    void git_diff_patch_free(git_diff_patch *patch)

    git_diff_delta *git_diff_patch_delta(git_diff_patch *patch)

    size_t git_diff_patch_num_hunks(git_diff_patch *patch)

    int git_diff_patch_line_stats(size_t *total_context, size_t *total_additions, size_t *total_deletions, git_diff_patch *patch)

    int git_diff_patch_get_hunk(git_diff_range **range, char **header, size_t *header_len, size_t *lines_in_hunk, git_diff_patch *patch, size_t hunk_idx)

    int git_diff_patch_num_lines_in_hunk(git_diff_patch *patch, size_t hunk_idx)

    int git_diff_patch_get_line_in_hunk(char *line_origin, char **content, size_t *content_len, int *old_lineno, int *new_lineno, git_diff_patch *patch, size_t hunk_idx, size_t line_of_hunk)

    int git_diff_patch_print(git_diff_patch *patch, git_diff_data_cb print_cb, void *payload)

    int git_diff_patch_to_str(char **string, git_diff_patch *patch)

    int git_diff_blobs(git_blob *old_blob, git_blob *new_blob, git_diff_options *options, git_diff_file_cb file_cb, git_diff_hunk_cb hunk_cb, git_diff_data_cb line_cb, void *payload)

    int git_diff_blob_to_buffer(git_blob *old_blob, char *buffer, size_t buffer_len, git_diff_options *options, git_diff_file_cb file_cb, git_diff_hunk_cb hunk_cb, git_diff_data_cb data_cb, void *payload)

    cdef struct git_index_time:
        git_time_t seconds
        unsigned int nanoseconds

    cdef struct git_index_entry:
        git_index_time ctime
        git_index_time mtime
        unsigned int dev
        unsigned int ino
        unsigned int mode
        unsigned int uid
        unsigned int gid
        git_off_t file_size
        git_oid oid
        short unsigned int flags
        short unsigned int flags_extended
        char *path

    ctypedef git_index_entry git_index_entry

    cdef struct git_index_reuc_entry:
        unsigned int mode[3]
        git_oid oid[3]
        char *path

    ctypedef git_index_reuc_entry git_index_reuc_entry

    cdef enum:
        GIT_INDEXCAP_IGNORE_CASE
        GIT_INDEXCAP_NO_FILEMODE
        GIT_INDEXCAP_NO_SYMLINKS
        GIT_INDEXCAP_FROM_OWNER

    int git_index_open(git_index **out, char *index_path)

    int git_index_new(git_index **out)

    void git_index_free(git_index *index)

    git_repository *git_index_owner(git_index *index)

    unsigned int git_index_caps(git_index *index)

    int git_index_set_caps(git_index *index, unsigned int caps)

    int git_index_read(git_index *index)

    int git_index_write(git_index *index)

    int git_index_read_tree(git_index *index, git_tree *tree)

    int git_index_write_tree(git_oid *out, git_index *index)

    int git_index_write_tree_to(git_oid *out, git_index *index, git_repository *repo)

    size_t git_index_entrycount(git_index *index)

    void git_index_clear(git_index *index)

    git_index_entry *git_index_get_byindex(git_index *index, size_t n)

    git_index_entry *git_index_get_bypath(git_index *index, char *path, int stage)

    int git_index_remove(git_index *index, char *path, int stage)

    int git_index_remove_directory(git_index *index, char *dir, int stage)

    int git_index_add(git_index *index, git_index_entry *source_entry)

    int git_index_entry_stage(git_index_entry *entry)

    int git_index_add_bypath(git_index *index, char *path)

    int git_index_remove_bypath(git_index *index, char *path)

    int git_index_find(size_t *at_pos, git_index *index, char *path)

    int git_index_conflict_add(git_index *index, git_index_entry *ancestor_entry, git_index_entry *our_entry, git_index_entry *their_entry)

    int git_index_conflict_get(git_index_entry **ancestor_out, git_index_entry **our_out, git_index_entry **their_out, git_index *index, char *path)

    int git_index_conflict_remove(git_index *index, char *path)

    void git_index_conflict_cleanup(git_index *index)

    int git_index_has_conflicts(git_index *index)

    unsigned int git_index_reuc_entrycount(git_index *index)

    int git_index_reuc_find(size_t *at_pos, git_index *index, char *path)

    git_index_reuc_entry *git_index_reuc_get_bypath(git_index *index, char *path)

    git_index_reuc_entry *git_index_reuc_get_byindex(git_index *index, size_t n)

    int git_index_reuc_add(git_index *index, char *path, int ancestor_mode, git_oid *ancestor_id, int our_mode, git_oid *our_id, int their_mode, git_oid *their_id)

    int git_index_reuc_remove(git_index *index, size_t n)

    cdef enum:
        GIT_CONFIG_LEVEL_SYSTEM
        GIT_CONFIG_LEVEL_XDG
        GIT_CONFIG_LEVEL_GLOBAL
        GIT_CONFIG_LEVEL_LOCAL
        GIT_CONFIG_HIGHEST_LEVEL

    cdef struct git_config_entry:
        char *name
        char *value
        unsigned int level

    ctypedef int (*git_config_foreach_cb)(git_config_entry *, void *)

    cdef struct git_config_backend:
        unsigned int version
        git_config *cfg
        int (*open)(git_config_backend *, unsigned int)
        int (*get)(git_config_backend *, char *, git_config_entry **)
        int (*get_multivar)(git_config_backend *, char *, char *, git_config_foreach_cb, void *)
        int (*set)(git_config_backend *, char *, char *)
        int (*set_multivar)(git_config_backend *, char *, char *, char *)
        int (*del_)(git_config_backend *, char *)
        int (*foreach)(git_config_backend *, char *, git_config_foreach_cb, void *)
        int (*refresh)(git_config_backend *)
        void (*free)(git_config_backend *)

    cdef enum git_cvar_t:
        GIT_CVAR_FALSE
        GIT_CVAR_TRUE
        GIT_CVAR_INT32
        GIT_CVAR_STRING

    cdef struct git_cvar_map:
        git_cvar_t cvar_type
        char *str_match
        int map_value

    int git_config_find_global(char *out, size_t length)

    int git_config_find_xdg(char *out, size_t length)

    int git_config_find_system(char *out, size_t length)

    int git_config_open_default(git_config **out)

    int git_config_new(git_config **out)

    int git_config_add_backend(git_config *cfg, git_config_backend *file, unsigned int level, int force)

    int git_config_add_file_ondisk(git_config *cfg, char *path, unsigned int level, int force)

    int git_config_open_ondisk(git_config **out, char *path)

    int git_config_open_level(git_config **out, git_config *parent, unsigned int level)

    int git_config_refresh(git_config *cfg)

    void git_config_free(git_config *cfg)

    int git_config_get_entry(git_config_entry **out, git_config *cfg, char *name)

    int git_config_get_int32(int32_t *out, git_config *cfg, char *name)

    int git_config_get_int64(int64_t *out, git_config *cfg, char *name)

    int git_config_get_bool(int *out, git_config *cfg, char *name)

    int git_config_get_string(char **out, git_config *cfg, char *name)

    int git_config_get_multivar(git_config *cfg, char *name, char *regexp, git_config_foreach_cb callback, void *payload)

    int git_config_set_int32(git_config *cfg, char *name, int32_t value)

    int git_config_set_int64(git_config *cfg, char *name, int64_t value)

    int git_config_set_bool(git_config *cfg, char *name, int value)

    int git_config_set_string(git_config *cfg, char *name, char *value)

    int git_config_set_multivar(git_config *cfg, char *name, char *regexp, char *value)

    int git_config_delete_entry(git_config *cfg, char *name)

    int git_config_foreach(git_config *cfg, git_config_foreach_cb callback, void *payload)

    int git_config_foreach_match(git_config *cfg, char *regexp, git_config_foreach_cb callback, void *payload)

    int git_config_get_mapped(int *out, git_config *cfg, char *name, git_cvar_map *maps, size_t map_n)

    int git_config_lookup_map_value(int *out, git_cvar_map *maps, size_t map_n, char *value)

    int git_config_parse_bool(int *out, char *value)

    int git_config_parse_int32(int32_t *out, char *value)

    int git_config_parse_int64(int64_t *out, char *value)

    cdef enum git_credtype_t:
        GIT_CREDTYPE_USERPASS_PLAINTEXT

    cdef struct git_cred:
        git_credtype_t credtype
        void (*free)(git_cred *)

    ctypedef git_cred git_cred

    cdef struct git_cred_userpass_plaintext:
        git_cred parent
        char *username
        char *password

    ctypedef git_cred_userpass_plaintext git_cred_userpass_plaintext

    int git_cred_userpass_plaintext_new(git_cred **out, char *username, char *password)

    ctypedef int (*git_cred_acquire_cb)(git_cred **, char *, char *, unsigned int, void *)

    cdef enum git_transport_flags_t:
        GIT_TRANSPORTFLAGS_NONE
        GIT_TRANSPORTFLAGS_NO_CHECK_CERT

    ctypedef void (*git_transport_message_cb)(char *, int, void *)

    cdef struct git_transport:
        unsigned int version
        int (*set_callbacks)(git_transport *, git_transport_message_cb, git_transport_message_cb, void *)
        int (*connect)(git_transport *, char *, git_cred_acquire_cb, void *, int, int)
        int (*ls)(git_transport *, git_headlist_cb, void *)
        int (*push)(git_transport *, git_push *)
        int (*negotiate_fetch)(git_transport *, git_repository *, git_remote_head **, size_t)
        int (*download_pack)(git_transport *, git_repository *, git_transfer_progress *, git_transfer_progress_callback, void *)
        int (*is_connected)(git_transport *)
        int (*read_flags)(git_transport *, int *)
        void (*cancel)(git_transport *)
        int (*close)(git_transport *)
        void (*free)(git_transport *)

    ctypedef git_transport git_transport

    int git_transport_new(git_transport **out, git_remote *owner, char *url)

    int git_transport_valid_url(char *url)

    ctypedef int (*git_transport_cb)(git_transport **, git_remote *, void *)

    int git_transport_dummy(git_transport **out, git_remote *owner, void *payload)

    int git_transport_local(git_transport **out, git_remote *owner, void *payload)

    int git_transport_smart(git_transport **out, git_remote *owner, void *payload)

    cdef enum git_smart_service_t:
        GIT_SERVICE_UPLOADPACK_LS
        GIT_SERVICE_UPLOADPACK
        GIT_SERVICE_RECEIVEPACK_LS
        GIT_SERVICE_RECEIVEPACK

    cdef struct git_smart_subtransport_stream:
        git_smart_subtransport *subtransport
        int (*read)(git_smart_subtransport_stream *, char *, size_t, size_t *)
        int (*write)(git_smart_subtransport_stream *, char *, size_t)
        void (*free)(git_smart_subtransport_stream *)

    ctypedef git_smart_subtransport_stream git_smart_subtransport_stream

    cdef struct git_smart_subtransport:
        int (*action)(git_smart_subtransport_stream **, git_smart_subtransport *, char *, git_smart_service_t)
        int (*close)(git_smart_subtransport *)
        void (*free)(git_smart_subtransport *)

    ctypedef git_smart_subtransport git_smart_subtransport

    ctypedef int (*git_smart_subtransport_cb)(git_smart_subtransport **, git_transport *)

    cdef struct git_smart_subtransport_definition:
        git_smart_subtransport_cb callback
        unsigned int rpc

    ctypedef git_smart_subtransport_definition git_smart_subtransport_definition

    int git_smart_subtransport_http(git_smart_subtransport **out, git_transport *owner)

    int git_smart_subtransport_git(git_smart_subtransport **out, git_transport *owner)

    cdef enum git_direction:
        GIT_DIRECTION_FETCH
        GIT_DIRECTION_PUSH

    cdef struct git_remote_head:
        int local
        git_oid oid
        git_oid loid
        char *name

    ctypedef int (*git_headlist_cb)(git_remote_head *, void *)

    ctypedef int (*git_remote_rename_problem_cb)(char *, void *)

    int git_remote_create(git_remote **out, git_repository *repo, char *name, char *url)

    int git_remote_create_inmemory(git_remote **out, git_repository *repo, char *fetch, char *url)

    int git_remote_load(git_remote **out, git_repository *repo, char *name)

    int git_remote_save(git_remote *remote)

    char *git_remote_name(git_remote *remote)

    char *git_remote_url(git_remote *remote)

    char *git_remote_pushurl(git_remote *remote)

    int git_remote_set_url(git_remote *remote, char *url)

    int git_remote_set_pushurl(git_remote *remote, char *url)

    int git_remote_set_fetchspec(git_remote *remote, char *spec)

    git_refspec *git_remote_fetchspec(git_remote *remote)

    int git_remote_set_pushspec(git_remote *remote, char *spec)

    git_refspec *git_remote_pushspec(git_remote *remote)

    int git_remote_connect(git_remote *remote, git_direction direction)

    int git_remote_ls(git_remote *remote, git_headlist_cb list_cb, void *payload)

    int git_remote_download(git_remote *remote, git_transfer_progress_callback progress_cb, void *payload)

    int git_remote_connected(git_remote *remote)

    void git_remote_stop(git_remote *remote)

    void git_remote_disconnect(git_remote *remote)

    void git_remote_free(git_remote *remote)

    int git_remote_update_tips(git_remote *remote)

    int git_remote_valid_url(char *url)

    int git_remote_supported_url(char *url)

    int git_remote_list(git_strarray *out, git_repository *repo)

    void git_remote_check_cert(git_remote *remote, int check)

    void git_remote_set_cred_acquire_cb(git_remote *remote, git_cred_acquire_cb cred_acquire_cb, void *payload)

    int git_remote_set_transport(git_remote *remote, git_transport *transport)

    cdef enum git_remote_completion_type:
        GIT_REMOTE_COMPLETION_DOWNLOAD
        GIT_REMOTE_COMPLETION_INDEXING
        GIT_REMOTE_COMPLETION_ERROR

    ctypedef git_remote_completion_type git_remote_completion_type

    cdef enum:
        GIT_REMOTE_CALLBACKS_VERSION

    ctypedef struct git_remote_callbacks:
        unsigned int version
        void (*progress)(char *, int, void *)
        int (*completion)(git_remote_completion_type, void *)
        int (*update_tips)(char *, git_oid *, git_oid *, void *)
        void *payload

    int git_remote_set_callbacks(git_remote *remote, git_remote_callbacks *callbacks)

    git_transfer_progress *git_remote_stats(git_remote *remote)

    cdef enum git_remote_autotag_option_t:
        GIT_REMOTE_DOWNLOAD_TAGS_UNSET
        GIT_REMOTE_DOWNLOAD_TAGS_NONE
        GIT_REMOTE_DOWNLOAD_TAGS_AUTO
        GIT_REMOTE_DOWNLOAD_TAGS_ALL

    git_remote_autotag_option_t git_remote_autotag(git_remote *remote)

    void git_remote_set_autotag(git_remote *remote, git_remote_autotag_option_t value)

    int git_remote_rename(git_remote *remote, char *new_name, git_remote_rename_problem_cb callback, void *payload)

    int git_remote_update_fetchhead(git_remote *remote)

    void git_remote_set_update_fetchhead(git_remote *remote, int value)

    int git_remote_is_valid_name(char *remote_name)

    cdef enum git_checkout_strategy_t:
        GIT_CHECKOUT_NONE
        GIT_CHECKOUT_SAFE
        GIT_CHECKOUT_SAFE_CREATE
        GIT_CHECKOUT_FORCE
        GIT_CHECKOUT_ALLOW_CONFLICTS
        GIT_CHECKOUT_REMOVE_UNTRACKED
        GIT_CHECKOUT_REMOVE_IGNORED
        GIT_CHECKOUT_UPDATE_ONLY
        GIT_CHECKOUT_DONT_UPDATE_INDEX
        GIT_CHECKOUT_NO_REFRESH
        GIT_CHECKOUT_DISABLE_PATHSPEC_MATCH
        GIT_CHECKOUT_SKIP_UNMERGED
        GIT_CHECKOUT_USE_OURS
        GIT_CHECKOUT_USE_THEIRS
        GIT_CHECKOUT_UPDATE_SUBMODULES
        GIT_CHECKOUT_UPDATE_SUBMODULES_IF_CHANGED

    cdef enum git_checkout_notify_t:
        GIT_CHECKOUT_NOTIFY_NONE
        GIT_CHECKOUT_NOTIFY_CONFLICT
        GIT_CHECKOUT_NOTIFY_DIRTY
        GIT_CHECKOUT_NOTIFY_UPDATED
        GIT_CHECKOUT_NOTIFY_UNTRACKED
        GIT_CHECKOUT_NOTIFY_IGNORED

    ctypedef int (*git_checkout_notify_cb)(git_checkout_notify_t, char *, git_diff_file *, git_diff_file *, git_diff_file *, void *)

    ctypedef void (*git_checkout_progress_cb)(char *, size_t, size_t, void *)

    cdef enum:
        GIT_CHECKOUT_OPTS_VERSION

    cdef struct git_checkout_opts:
        unsigned int version
        unsigned int checkout_strategy
        int disable_filters
        unsigned int dir_mode
        unsigned int file_mode
        int file_open_flags
        unsigned int notify_flags
        git_checkout_notify_cb notify_cb
        void *notify_payload
        git_checkout_progress_cb progress_cb
        void *progress_payload
        git_strarray paths
        git_tree *baseline

    ctypedef git_checkout_opts git_checkout_opts

    int git_checkout_head(git_repository *repo, git_checkout_opts *opts)

    int git_checkout_index(git_repository *repo, git_index *index, git_checkout_opts *opts)

    int git_checkout_tree(git_repository *repo, git_object *treeish, git_checkout_opts *opts)

    ctypedef enum:
        GIT_CLONE_OPTIONS_VERSION

    cdef struct git_clone_options:
        unsigned int version
        git_checkout_opts checkout_opts
        int bare
        git_transfer_progress_callback fetch_progress_cb
        void *fetch_progress_payload
        char *remote_name
        char *pushurl
        char *fetch_spec
        char *push_spec
        git_cred_acquire_cb cred_acquire_cb
        void *cred_acquire_payload
        git_transport *transport
        git_remote_callbacks *remote_callbacks
        git_remote_autotag_option_t remote_autotag
        char *checkout_branch

    ctypedef git_clone_options git_clone_options

    int git_clone(git_repository **out, char *url, char *local_path, git_clone_options *options)

    cdef struct git_push_options:
        unsigned int version
        unsigned int pb_parallelism

    int git_push_new(git_push **out, git_remote *remote)

    int git_push_set_options(git_push *push, git_push_options *opts)

    int git_push_add_refspec(git_push *push, char *refspec)

    int git_push_update_tips(git_push *push)

    int git_push_finish(git_push *push)

    int git_push_unpack_ok(git_push *push)

    int git_push_status_foreach(git_push *push, int (*cb)(char *, char *, void *), void *data)

    void git_push_free(git_push *push)

    cdef enum git_attr_t:
        GIT_ATTR_UNSPECIFIED_T
        GIT_ATTR_TRUE_T
        GIT_ATTR_FALSE_T
        GIT_ATTR_VALUE_T

    git_attr_t git_attr_value(char *attr)

    int git_attr_get(char **value_out, git_repository *repo, uint32_t flags, char *path, char *name)

    int git_attr_get_many(char **values_out, git_repository *repo, uint32_t flags, char *path, size_t num_attr, char **names)

    ctypedef int (*git_attr_foreach_cb)(char *, char *, void *)

    int git_attr_foreach(git_repository *repo, uint32_t flags, char *path, git_attr_foreach_cb callback, void *payload)

    void git_attr_cache_flush(git_repository *repo)

    int git_attr_add_macro(git_repository *repo, char *name, char *values)

    int git_ignore_add_rule(git_repository *repo, char *rules)

    int git_ignore_clear_internal_rules(git_repository *repo)

    int git_ignore_path_is_ignored(int *ignored, git_repository *repo, char *path)

    int git_branch_create(git_reference **out, git_repository *repo, char *branch_name, git_commit *target, int force)

    int git_branch_delete(git_reference *branch)

    int git_branch_foreach(git_repository *repo, unsigned int list_flags, int (*branch_cb)(char *, git_branch_t, void *), void *payload)

    int git_branch_move(git_reference *branch, char *new_branch_name, int force)

    int git_branch_lookup(git_reference **out, git_repository *repo, char *branch_name, git_branch_t branch_type)

    int git_branch_name(char **out, git_reference *ref)

    int git_branch_tracking(git_reference **out, git_reference *branch)

    int git_branch_tracking_name(char *tracking_branch_name_out, size_t buffer_size, git_repository *repo, char *canonical_branch_name)

    int git_branch_is_head(git_reference *branch)

    int git_branch_remote_name(char *remote_name_out, size_t buffer_size, git_repository *repo, char *canonical_branch_name)

    char *git_refspec_src(git_refspec *refspec)

    char *git_refspec_dst(git_refspec *refspec)

    int git_refspec_force(git_refspec *refspec)

    int git_refspec_src_matches(git_refspec *refspec, char *refname)

    int git_refspec_dst_matches(git_refspec *refspec, char *refname)

    int git_refspec_transform(char *out, size_t outlen, git_refspec *spec, char *name)

    int git_refspec_rtransform(char *out, size_t outlen, git_refspec *spec, char *name)

    cdef enum git_direction:
        GIT_DIRECTION_FETCH
        GIT_DIRECTION_PUSH

    cdef struct git_remote_head:
        int local
        git_oid oid
        git_oid loid
        char *name

    ctypedef int (*git_headlist_cb)(git_remote_head *, void *)

    cdef enum git_status_t:
        GIT_STATUS_CURRENT
        GIT_STATUS_INDEX_NEW
        GIT_STATUS_INDEX_MODIFIED
        GIT_STATUS_INDEX_DELETED
        GIT_STATUS_INDEX_RENAMED
        GIT_STATUS_INDEX_TYPECHANGE
        GIT_STATUS_WT_NEW
        GIT_STATUS_WT_MODIFIED
        GIT_STATUS_WT_DELETED
        GIT_STATUS_WT_TYPECHANGE
        GIT_STATUS_IGNORED

    ctypedef int (*git_status_cb)(char *, unsigned int, void *)

    int git_status_foreach(git_repository *repo, git_status_cb callback, void *payload)

    cdef enum git_status_show_t:
        GIT_STATUS_SHOW_INDEX_AND_WORKDIR
        GIT_STATUS_SHOW_INDEX_ONLY
        GIT_STATUS_SHOW_WORKDIR_ONLY
        GIT_STATUS_SHOW_INDEX_THEN_WORKDIR

    cdef enum git_status_opt_t:
        GIT_STATUS_OPT_INCLUDE_UNTRACKED
        GIT_STATUS_OPT_INCLUDE_IGNORED
        GIT_STATUS_OPT_INCLUDE_UNMODIFIED
        GIT_STATUS_OPT_EXCLUDE_SUBMODULES
        GIT_STATUS_OPT_RECURSE_UNTRACKED_DIRS
        GIT_STATUS_OPT_DISABLE_PATHSPEC_MATCH

    cdef struct git_status_options:
        unsigned int version
        git_status_show_t show
        unsigned int flags
        git_strarray pathspec

    int git_status_foreach_ext(git_repository *repo, git_status_options *opts, git_status_cb callback, void *payload)

    int git_status_file(unsigned int *status_flags, git_repository *repo, char *path)

    int git_status_should_ignore(int *ignored, git_repository *repo, char *path)

    # cdef struct __wait_N4wait3DOT_1E:
    #     unsigned int __w_termsig
    #     unsigned int __w_coredump
    #     unsigned int __w_retcode
    #     unsigned int

    # cdef struct __wait_N4wait3DOT_2E:
    #     unsigned int __w_stopval
    #     unsigned int __w_stopsig
    #     unsigned int

    # cdef union wait:
    #     int w_status
    #     __wait_N4wait3DOT_1E_t __wait_terminated
    #     __wait_N4wait3DOT_2E_t __wait_stopped

    ctypedef git_submodule git_submodule

    cdef struct git_submodule:
        pass

    cdef enum git_submodule_update_t:
        GIT_SUBMODULE_UPDATE_DEFAULT
        GIT_SUBMODULE_UPDATE_CHECKOUT
        GIT_SUBMODULE_UPDATE_REBASE
        GIT_SUBMODULE_UPDATE_MERGE
        GIT_SUBMODULE_UPDATE_NONE

    cdef enum git_submodule_ignore_t:
        GIT_SUBMODULE_IGNORE_DEFAULT
        GIT_SUBMODULE_IGNORE_NONE
        GIT_SUBMODULE_IGNORE_UNTRACKED
        GIT_SUBMODULE_IGNORE_DIRTY
        GIT_SUBMODULE_IGNORE_ALL

    cdef enum git_submodule_status_t:
        GIT_SUBMODULE_STATUS_IN_HEAD
        GIT_SUBMODULE_STATUS_IN_INDEX
        GIT_SUBMODULE_STATUS_IN_CONFIG
        GIT_SUBMODULE_STATUS_IN_WD
        GIT_SUBMODULE_STATUS_INDEX_ADDED
        GIT_SUBMODULE_STATUS_INDEX_DELETED
        GIT_SUBMODULE_STATUS_INDEX_MODIFIED
        GIT_SUBMODULE_STATUS_WD_UNINITIALIZED
        GIT_SUBMODULE_STATUS_WD_ADDED
        GIT_SUBMODULE_STATUS_WD_DELETED
        GIT_SUBMODULE_STATUS_WD_MODIFIED
        GIT_SUBMODULE_STATUS_WD_INDEX_MODIFIED
        GIT_SUBMODULE_STATUS_WD_WD_MODIFIED
        GIT_SUBMODULE_STATUS_WD_UNTRACKED

    int git_submodule_lookup(git_submodule **submodule, git_repository *repo, char *name)

    int git_submodule_foreach(git_repository *repo, int (*callback)(git_submodule *, char *, void *), void *payload)

    int git_submodule_add_setup(git_submodule **submodule, git_repository *repo, char *url, char *path, int use_gitlink)

    int git_submodule_add_finalize(git_submodule *submodule)

    int git_submodule_add_to_index(git_submodule *submodule, int write_index)

    int git_submodule_save(git_submodule *submodule)

    git_repository *git_submodule_owner(git_submodule *submodule)

    char *git_submodule_name(git_submodule *submodule)

    char *git_submodule_path(git_submodule *submodule)

    char *git_submodule_url(git_submodule *submodule)

    int git_submodule_set_url(git_submodule *submodule, char *url)

    git_oid *git_submodule_index_id(git_submodule *submodule)

    git_oid *git_submodule_head_id(git_submodule *submodule)

    git_oid *git_submodule_wd_id(git_submodule *submodule)

    git_submodule_ignore_t git_submodule_ignore(git_submodule *submodule)

    git_submodule_ignore_t git_submodule_set_ignore(git_submodule *submodule, git_submodule_ignore_t ignore)

    git_submodule_update_t git_submodule_update(git_submodule *submodule)

    git_submodule_update_t git_submodule_set_update(git_submodule *submodule, git_submodule_update_t update)

    int git_submodule_fetch_recurse_submodules(git_submodule *submodule)

    int git_submodule_set_fetch_recurse_submodules(git_submodule *submodule, int fetch_recurse_submodules)

    int git_submodule_init(git_submodule *submodule, int overwrite)

    int git_submodule_sync(git_submodule *submodule)

    int git_submodule_open(git_repository **repo, git_submodule *submodule)

    int git_submodule_reload(git_submodule *submodule)

    int git_submodule_reload_all(git_repository *repo)

    int git_submodule_status(unsigned int *status, git_submodule *submodule)

    int git_submodule_location(unsigned int *location_status, git_submodule *submodule)

    ctypedef int (*git_note_foreach_cb)(git_oid *, git_oid *, void *)

    int git_note_read(git_note **out, git_repository *repo, char *notes_ref, git_oid *oid)

    char *git_note_message(git_note *note)

    git_oid *git_note_oid(git_note *note)

    int git_note_create(git_oid *out, git_repository *repo, git_signature *author, git_signature *committer, char *notes_ref, git_oid *oid, char *note, int force)

    int git_note_remove(git_repository *repo, char *notes_ref, git_signature *author, git_signature *committer, git_oid *oid)

    void git_note_free(git_note *note)

    int git_note_default_ref(char **out, git_repository *repo)

    int git_note_foreach(git_repository *repo, char *notes_ref, git_note_foreach_cb note_cb, void *payload)

    cdef enum git_reset_t:
        GIT_RESET_SOFT
        GIT_RESET_MIXED
        GIT_RESET_HARD

    int git_reset(git_repository *repo, git_object *target, git_reset_t reset_type)

    int git_reset_default(git_repository *repo, git_object *target, git_strarray *pathspecs)

    int git_message_prettify(char *out, size_t out_size, char *message, int strip_comments)

    int git_packbuilder_new(git_packbuilder **out, git_repository *repo)

    unsigned int git_packbuilder_set_threads(git_packbuilder *pb, unsigned int n)

    int git_packbuilder_insert(git_packbuilder *pb, git_oid *id, char *name)

    int git_packbuilder_insert_tree(git_packbuilder *pb, git_oid *id)

    int git_packbuilder_write(git_packbuilder *pb, char *file)

    ctypedef int (*git_packbuilder_foreach_cb)(void *, size_t, void *)

    int git_packbuilder_foreach(git_packbuilder *pb, git_packbuilder_foreach_cb cb, void *payload)

    uint32_t git_packbuilder_object_count(git_packbuilder *pb)

    uint32_t git_packbuilder_written(git_packbuilder *pb)

    void git_packbuilder_free(git_packbuilder *pb)

    cdef enum git_stash_flags:
        GIT_STASH_DEFAULT
        GIT_STASH_KEEP_INDEX
        GIT_STASH_INCLUDE_UNTRACKED
        GIT_STASH_INCLUDE_IGNORED

    int git_stash_save(git_oid *out, git_repository *repo, git_signature *stasher, char *message, unsigned int flags)

    ctypedef int (*git_stash_cb)(size_t, char *, git_oid *, void *)

    int git_stash_foreach(git_repository *repo, git_stash_cb callback, void *payload)

    int git_stash_drop(git_repository *repo, size_t index)

# This code was automatically generated by CWrap version 0.0.0

from _types cimport \
    git_reference, \
    git_repository, \
    git_ref_t, \
    git_object, \
    git_otype

from _oid cimport git_oid

from _strarray cimport git_strarray


cdef extern from "git2.h":

    int git_reference_lookup(git_reference **out, git_repository *repo, char *name)

    int git_reference_name_to_id(git_oid *out, git_repository *repo, char *name)

    int git_reference_symbolic_create(git_reference **out, git_repository *repo, char *name, char *target, int force)

    int git_reference_create(git_reference **out, git_repository *repo, char *name, git_oid *id, int force)

    git_oid *git_reference_target(git_reference *ref)

    char *git_reference_symbolic_target(git_reference *ref)

    git_ref_t git_reference_type(git_reference *ref)

    char *git_reference_name(git_reference *ref)

    int git_reference_resolve(git_reference **out, git_reference *ref)

    git_repository *git_reference_owner(git_reference *ref)

    int git_reference_symbolic_set_target(git_reference **out, git_reference *ref, char *target)

    int git_reference_set_target(git_reference **out, git_reference *ref, git_oid *id)

    int git_reference_rename(git_reference **out, git_reference *ref, char *new_name, int force)

    int git_reference_delete(git_reference *ref)

    int git_reference_list(git_strarray *array, git_repository *repo, unsigned int list_flags)

    ctypedef int (*git_reference_foreach_cb)(char *, void *)

    int git_reference_foreach(git_repository *repo, unsigned int list_flags, git_reference_foreach_cb callback, void *payload)

    void git_reference_free(git_reference *ref)

    int git_reference_cmp(git_reference *ref1, git_reference *ref2)

    int git_reference_foreach_glob(git_repository *repo, char *glob, unsigned int list_flags, git_reference_foreach_cb callback, void *payload)

    int git_reference_has_log(git_reference *ref)

    int git_reference_is_branch(git_reference *ref)

    int git_reference_is_remote(git_reference *ref)

    cdef enum git_reference_normalize_t:
        GIT_REF_FORMAT_NORMAL
        GIT_REF_FORMAT_ALLOW_ONELEVEL
        GIT_REF_FORMAT_REFSPEC_PATTERN

    int git_reference_normalize_name(char *buffer_out, size_t buffer_size, char *name, unsigned int flags)

    int git_reference_peel(git_object **out, git_reference *ref, git_otype type)

    int git_reference_is_valid_name(char *refname)

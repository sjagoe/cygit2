# This code was automatically generated by CWrap version 0.0.0

cdef extern from "git2.h":

    cdef struct git_index_time:
        git_time_t seconds
        unsigned int nanoseconds

    cdef struct git_index_entry:
        git_index_time ctime
        git_index_time mtime
        unsigned int dev
        unsigned int ino
        unsigned int mode
        unsigned int uid
        unsigned int gid
        git_off_t file_size
        git_oid oid
        short unsigned int flags
        short unsigned int flags_extended
        char *path

    ctypedef git_index_entry git_index_entry

    cdef struct git_index_reuc_entry:
        unsigned int mode[3]
        git_oid oid[3]
        char *path

    ctypedef git_index_reuc_entry git_index_reuc_entry

    cdef enum:
        GIT_INDEXCAP_IGNORE_CASE
        GIT_INDEXCAP_NO_FILEMODE
        GIT_INDEXCAP_NO_SYMLINKS
        GIT_INDEXCAP_FROM_OWNER

    int git_index_open(git_index **out, char *index_path)

    int git_index_new(git_index **out)

    void git_index_free(git_index *index)

    git_repository *git_index_owner(git_index *index)

    unsigned int git_index_caps(git_index *index)

    int git_index_set_caps(git_index *index, unsigned int caps)

    int git_index_read(git_index *index)

    int git_index_write(git_index *index)

    int git_index_read_tree(git_index *index, git_tree *tree)

    int git_index_write_tree(git_oid *out, git_index *index)

    int git_index_write_tree_to(git_oid *out, git_index *index, git_repository *repo)

    size_t git_index_entrycount(git_index *index)

    void git_index_clear(git_index *index)

    git_index_entry *git_index_get_byindex(git_index *index, size_t n)

    git_index_entry *git_index_get_bypath(git_index *index, char *path, int stage)

    int git_index_remove(git_index *index, char *path, int stage)

    int git_index_remove_directory(git_index *index, char *dir, int stage)

    int git_index_add(git_index *index, git_index_entry *source_entry)

    int git_index_entry_stage(git_index_entry *entry)

    int git_index_add_bypath(git_index *index, char *path)

    int git_index_remove_bypath(git_index *index, char *path)

    int git_index_find(size_t *at_pos, git_index *index, char *path)

    int git_index_conflict_add(git_index *index, git_index_entry *ancestor_entry, git_index_entry *our_entry, git_index_entry *their_entry)

    int git_index_conflict_get(git_index_entry **ancestor_out, git_index_entry **our_out, git_index_entry **their_out, git_index *index, char *path)

    int git_index_conflict_remove(git_index *index, char *path)

    void git_index_conflict_cleanup(git_index *index)

    int git_index_has_conflicts(git_index *index)

    unsigned int git_index_reuc_entrycount(git_index *index)

    int git_index_reuc_find(size_t *at_pos, git_index *index, char *path)

    git_index_reuc_entry *git_index_reuc_get_bypath(git_index *index, char *path)

    git_index_reuc_entry *git_index_reuc_get_byindex(git_index *index, size_t n)

    int git_index_reuc_add(git_index *index, char *path, int ancestor_mode, git_oid *ancestor_id, int our_mode, git_oid *our_id, int their_mode, git_oid *their_id)

    int git_index_reuc_remove(git_index *index, size_t n)

    void git_index_reuc_clear(git_index *index)
